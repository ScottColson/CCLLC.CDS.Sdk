// 
// Code generated by a template.
//
using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;


namespace Shared.Proxies 
{
	
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1720:Identifier contains type name", Justification = "<Pending>")]
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1056:URI-like properties should not be strings", Justification = "<Pending>")]
	[EntityLogicalName("team")]
	public partial class Team : CCLLC.CDS.Sdk.EarlyBound.EntityProxy
	{
		public const string EntityLogicalName = "team";
		public const string PrimaryIdAttribute = "teamid";
		public const string PrimaryNameAttribute = "name";

		public Team()
			: base("team") {}

		#region Local OptionSet Enumerations

		#pragma warning disable IDE1006 // Naming Styles
		public enum eMembershipType { MembersAndGuests=0,  Members=1,  Owners=2,  Guests=3, }
		public enum eTeamType { Owner=0,  Access=1,  AADSecurityGroup=2,  AADOfficeGroup=3, }
		#pragma warning restore IDE1006 // Naming Styles

		#endregion Local OptionSet Enumerations

		#region Late Bound Field Constants

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>")]
		public static class Fields
		{			
			public const string Id = "teamid";
			public const string AdministratorId = "administratorid";
			public const string AdministratorIdName = "administratoridname";
			public const string AdministratorIdYomiName = "administratoridyominame";
			public const string AzureActiveDirectoryObjectId = "azureactivedirectoryobjectid";
			public const string BusinessUnitId = "businessunitid";
			public const string BusinessUnitIdName = "businessunitidname";
			public const string CreatedBy = "createdby";
			public const string CreatedByName = "createdbyname";
			public const string CreatedByYomiName = "createdbyyominame";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByName = "createdonbehalfbyname";
			public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
			public const string Description = "description";
			public const string EMailAddress = "emailaddress";
			public const string ExchangeRate = "exchangerate";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IsDefault = "isdefault";
			public const string IsDefaultName = "isdefaultname";
			public const string IsSasTokenSet = "issastokenset";
			public const string IssastokensetName = "issastokensetname";
			public const string MembershipType = "membershiptype";
			public const string MembershiptypeName = "membershiptypename";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByName = "modifiedbyname";
			public const string ModifiedByYomiName = "modifiedbyyominame";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
			public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
			public const string Name = "name";
			public const string OrganizationId = "organizationid";
			public const string OrganizationIdName = "organizationidname";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ProcessId = "processid";
			public const string QueueId = "queueid";
			public const string QueueIdName = "queueidname";
			public const string RegardingObjectId = "regardingobjectid";
			public const string RegardingObjectTypeCode = "regardingobjecttypecode";
			public const string SasToken = "sastoken";
			public const string ShareLinkQualifier = "sharelinkqualifier";
			public const string StageId = "stageid";
			public const string SystemManaged = "systemmanaged";
			public const string SystemManagedName = "systemmanagedname";
			public const string TeamId = "teamid";
			public const string TeamTemplateId = "teamtemplateid";
			public const string TeamType = "teamtype";
			public const string TeamTypeName = "teamtypename";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TransactionCurrencyIdName = "transactioncurrencyidname";
			public const string TraversedPath = "traversedpath";
			public const string VersionNumber = "versionnumber";
			public const string YomiName = "yominame";
		}

		#endregion Late Bound Field Constants

		[AttributeLogicalName("teamid")]
		public override Guid Id
		{
			get => base.Id; 
			set 
			{
				TeamId = value;
				base.Id = value;
			}
		}

		[AttributeLogicalName("administratorid")]
		public virtual EntityReference AdministratorId
		{
			get => GetPropertyValue<EntityReference>("administratorid"); 
			set => SetPropertyValue("administratorid", value); 
		}

		[AttributeLogicalName("administratoridname")]
		public virtual string AdministratorIdName
		{
			get => GetPropertyValue<string>("administratoridname"); 
		}

		[AttributeLogicalName("administratoridyominame")]
		public virtual string AdministratorIdYomiName
		{
			get => GetPropertyValue<string>("administratoridyominame"); 
		}

		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public virtual Guid AzureActiveDirectoryObjectId
		{
			get => GetPropertyValue<Guid>("azureactivedirectoryobjectid"); 
			set => SetPropertyValue("azureactivedirectoryobjectid", value); 
		}

		[AttributeLogicalName("businessunitid")]
		public virtual EntityReference BusinessUnitId
		{
			get => GetPropertyValue<EntityReference>("businessunitid"); 
			set => SetPropertyValue("businessunitid", value); 
		}

		[AttributeLogicalName("businessunitidname")]
		public virtual string BusinessUnitIdName
		{
			get => GetPropertyValue<string>("businessunitidname"); 
		}

		[AttributeLogicalName("createdby")]
		public virtual EntityReference CreatedBy
		{
			get => GetPropertyValue<EntityReference>("createdby"); 
		}

		[AttributeLogicalName("createdbyname")]
		public virtual string CreatedByName
		{
			get => GetPropertyValue<string>("createdbyname"); 
		}

		[AttributeLogicalName("createdbyyominame")]
		public virtual string CreatedByYomiName
		{
			get => GetPropertyValue<string>("createdbyyominame"); 
		}

		[AttributeLogicalName("createdon")]
		public virtual DateTime? CreatedOn
		{
			get => GetPropertyValue<DateTime?>("createdon"); 
		}

		[AttributeLogicalName("createdonbehalfby")]
		public virtual EntityReference CreatedOnBehalfBy
		{
			get => GetPropertyValue<EntityReference>("createdonbehalfby"); 
		}

		[AttributeLogicalName("createdonbehalfbyname")]
		public virtual string CreatedOnBehalfByName
		{
			get => GetPropertyValue<string>("createdonbehalfbyname"); 
		}

		[AttributeLogicalName("createdonbehalfbyyominame")]
		public virtual string CreatedOnBehalfByYomiName
		{
			get => GetPropertyValue<string>("createdonbehalfbyyominame"); 
		}

		[AttributeLogicalName("description")]
		public virtual string Description
		{
			get => GetPropertyValue<string>("description"); 
			set => SetPropertyValue("description", value); 
		}

		[AttributeLogicalName("emailaddress")]
		public virtual string EMailAddress
		{
			get => GetPropertyValue<string>("emailaddress"); 
			set => SetPropertyValue("emailaddress", value); 
		}

		[AttributeLogicalName("exchangerate")]
		public virtual decimal? ExchangeRate
		{
			get => GetPropertyValue<decimal?>("exchangerate"); 
		}

		[AttributeLogicalName("importsequencenumber")]
		public virtual int? ImportSequenceNumber
		{
			get => GetPropertyValue<int?>("importsequencenumber"); 
			set => SetPropertyValue("importsequencenumber", value); 
		}

		[AttributeLogicalName("isdefault")]
		public virtual bool? IsDefault
		{
			get => GetPropertyValue<bool?>("isdefault"); 
		}

		[AttributeLogicalName("isdefaultname")]
		public virtual string IsDefaultName
		{
			get => GetPropertyValue<string>("isdefaultname"); 
		}

		[AttributeLogicalName("issastokenset")]
		public virtual bool? IsSasTokenSet
		{
			get => GetPropertyValue<bool?>("issastokenset"); 
		}

		[AttributeLogicalName("issastokensetname")]
		public virtual string IssastokensetName
		{
			get => GetPropertyValue<string>("issastokensetname"); 
		}

		[AttributeLogicalName("membershiptype")]
		public virtual eMembershipType? MembershipType
		{
			get => (eMembershipType?)GetPropertyValue<OptionSetValue>("membershiptype")?.Value;
			set => SetPropertyValue("membershiptype", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("membershiptypename")]
		public virtual string MembershiptypeName
		{
			get => GetPropertyValue<string>("membershiptypename"); 
		}

		[AttributeLogicalName("modifiedby")]
		public virtual EntityReference ModifiedBy
		{
			get => GetPropertyValue<EntityReference>("modifiedby"); 
		}

		[AttributeLogicalName("modifiedbyname")]
		public virtual string ModifiedByName
		{
			get => GetPropertyValue<string>("modifiedbyname"); 
		}

		[AttributeLogicalName("modifiedbyyominame")]
		public virtual string ModifiedByYomiName
		{
			get => GetPropertyValue<string>("modifiedbyyominame"); 
		}

		[AttributeLogicalName("modifiedon")]
		public virtual DateTime? ModifiedOn
		{
			get => GetPropertyValue<DateTime?>("modifiedon"); 
		}

		[AttributeLogicalName("modifiedonbehalfby")]
		public virtual EntityReference ModifiedOnBehalfBy
		{
			get => GetPropertyValue<EntityReference>("modifiedonbehalfby"); 
		}

		[AttributeLogicalName("modifiedonbehalfbyname")]
		public virtual string ModifiedOnBehalfByName
		{
			get => GetPropertyValue<string>("modifiedonbehalfbyname"); 
		}

		[AttributeLogicalName("modifiedonbehalfbyyominame")]
		public virtual string ModifiedOnBehalfByYomiName
		{
			get => GetPropertyValue<string>("modifiedonbehalfbyyominame"); 
		}

		[AttributeLogicalName("name")]
		public virtual string Name
		{
			get => GetPropertyValue<string>("name"); 
			set => SetPropertyValue("name", value); 
		}

		[AttributeLogicalName("organizationid")]
		public virtual Guid OrganizationId
		{
			get => GetPropertyValue<Guid>("organizationid"); 
		}

		[AttributeLogicalName("organizationidname")]
		public virtual string OrganizationIdName
		{
			get => GetPropertyValue<string>("organizationidname"); 
		}

		[AttributeLogicalName("overriddencreatedon")]
		public virtual DateTime? OverriddenCreatedOn
		{
			get => GetPropertyValue<DateTime?>("overriddencreatedon"); 
			set => SetPropertyValue("overriddencreatedon", value); 
		}

		[AttributeLogicalName("processid")]
		public virtual Guid ProcessId
		{
			get => GetPropertyValue<Guid>("processid"); 
			set => SetPropertyValue("processid", value); 
		}

		[AttributeLogicalName("queueid")]
		public virtual EntityReference QueueId
		{
			get => GetPropertyValue<EntityReference>("queueid"); 
			set => SetPropertyValue("queueid", value); 
		}

		[AttributeLogicalName("queueidname")]
		public virtual string QueueIdName
		{
			get => GetPropertyValue<string>("queueidname"); 
		}

		[AttributeLogicalName("regardingobjectid")]
		public virtual EntityReference RegardingObjectId
		{
			get => GetPropertyValue<EntityReference>("regardingobjectid"); 
			set => SetPropertyValue("regardingobjectid", value); 
		}

		[AttributeLogicalName("regardingobjecttypecode")]
		public virtual string RegardingObjectTypeCode
		{
			get => GetPropertyValue<string>("regardingobjecttypecode"); 
			set => SetPropertyValue("regardingobjecttypecode", value); 
		}

		[AttributeLogicalName("sastoken")]
		public virtual string SasToken
		{
			get => GetPropertyValue<string>("sastoken"); 
		}

		[AttributeLogicalName("sharelinkqualifier")]
		public virtual string ShareLinkQualifier
		{
			get => GetPropertyValue<string>("sharelinkqualifier"); 
		}

		[AttributeLogicalName("stageid")]
		public virtual Guid StageId
		{
			get => GetPropertyValue<Guid>("stageid"); 
			set => SetPropertyValue("stageid", value); 
		}

		[AttributeLogicalName("systemmanaged")]
		public virtual bool? SystemManaged
		{
			get => GetPropertyValue<bool?>("systemmanaged"); 
		}

		[AttributeLogicalName("systemmanagedname")]
		public virtual string SystemManagedName
		{
			get => GetPropertyValue<string>("systemmanagedname"); 
		}

		[AttributeLogicalName("teamid")]
		public virtual Guid TeamId
		{
			get => GetPropertyValue<Guid>("teamid"); 
			set => SetPropertyValue("teamid", value); 
		}

		[AttributeLogicalName("teamtemplateid")]
		public virtual EntityReference TeamTemplateId
		{
			get => GetPropertyValue<EntityReference>("teamtemplateid"); 
			set => SetPropertyValue("teamtemplateid", value); 
		}

		[AttributeLogicalName("teamtype")]
		public virtual eTeamType? TeamType
		{
			get => (eTeamType?)GetPropertyValue<OptionSetValue>("teamtype")?.Value;
			set => SetPropertyValue("teamtype", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("teamtypename")]
		public virtual string TeamTypeName
		{
			get => GetPropertyValue<string>("teamtypename"); 
		}

		[AttributeLogicalName("transactioncurrencyid")]
		public virtual EntityReference TransactionCurrencyId
		{
			get => GetPropertyValue<EntityReference>("transactioncurrencyid"); 
			set => SetPropertyValue("transactioncurrencyid", value); 
		}

		[AttributeLogicalName("transactioncurrencyidname")]
		public virtual string TransactionCurrencyIdName
		{
			get => GetPropertyValue<string>("transactioncurrencyidname"); 
		}

		[AttributeLogicalName("traversedpath")]
		public virtual string TraversedPath
		{
			get => GetPropertyValue<string>("traversedpath"); 
			set => SetPropertyValue("traversedpath", value); 
		}

		[AttributeLogicalName("versionnumber")]
		public virtual int? VersionNumber
		{
			get => GetPropertyValue<int?>("versionnumber"); 
		}

		[AttributeLogicalName("yominame")]
		public virtual string YomiName
		{
			get => GetPropertyValue<string>("yominame"); 
			set => SetPropertyValue("yominame", value); 
		}

	

	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("businessunitid")]
	[RelationshipSchemaName("business_unit_teams")]
	public BusinessUnit business_unit_teams
	{
		get { return this.GetRelatedEntity<BusinessUnit>("business_unit_teams",null); }
	}


	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("administratorid")]
	[RelationshipSchemaName("lk_teambase_administratorid")]
	public SystemUser lk_teambase_administratorid
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_teambase_administratorid",null); }
	}


		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("createdby")]
	[RelationshipSchemaName("lk_teambase_createdby")]
	public SystemUser lk_teambase_createdby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_teambase_createdby",null); }
	}


		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("modifiedby")]
	[RelationshipSchemaName("lk_teambase_modifiedby")]
	public SystemUser lk_teambase_modifiedby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_teambase_modifiedby",null); }
	}


		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("createdonbehalfby")]
	[RelationshipSchemaName("lk_team_createdonbehalfby")]
	public SystemUser lk_team_createdonbehalfby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_team_createdonbehalfby",null); }
	}


		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("modifiedonbehalfby")]
	[RelationshipSchemaName("lk_team_modifiedonbehalfby")]
	public SystemUser lk_team_modifiedonbehalfby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_team_modifiedonbehalfby",null); }
	}


	
	
	
	
	    }
}
