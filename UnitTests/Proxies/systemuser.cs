// 
// Code generated by a template.
//
using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;


namespace Shared.Proxies 
{
	
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1720:Identifier contains type name", Justification = "<Pending>")]
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1056:URI-like properties should not be strings", Justification = "<Pending>")]
	[EntityLogicalName("systemuser")]
	public partial class SystemUser : CCLLC.CDS.Sdk.EarlyBound.EntityProxy
	{
		public const string EntityLogicalName = "systemuser";
		public const string PrimaryIdAttribute = "systemuserid";
		public const string PrimaryNameAttribute = "fullname";

		public SystemUser()
			: base("systemuser") {}

		#region Local OptionSet Enumerations

		#pragma warning disable IDE1006 // Naming Styles
		public enum eAccessMode { ReadWrite=0,  Administrative=1,  Read=2,  SupportUser=3,  Noninteractive=4,  DelegatedAdmin=5, }
		public enum eAddress1AddressTypeCode { DefaultValue=1, }
		public enum eAddress1ShippingMethodCode { DefaultValue=1, }
		public enum eAddress2AddressTypeCode { DefaultValue=1, }
		public enum eAddress2ShippingMethodCode { DefaultValue=1, }
		public enum eAzureState { Exists=0,  SoftDeleted=1,  NotFoundOrHardDeleted=2, }
		public enum eCALType { Professional=0,  Administrative=1,  Basic=2,  DeviceProfessional=3,  DeviceBasic=4,  Essential=5,  DeviceEssential=6,  Enterprise=7,  DeviceEnterprise=8,  Sales=9,  Service=10,  FieldService=11,  ProjectService=12, }
		public enum eDeletedState { NotDeleted=0,  SoftDeleted=1, }
		public enum eEmailRouterAccessApproval { Empty=0,  Approved=1,  PendingApproval=2,  Rejected=3, }
		public enum eIncomingEmailDeliveryMethod { None=0,  MicrosoftDynamics365ForOutlook=1,  ServerSideSynchronizationOrEmailRouter=2,  ForwardMailbox=3, }
		public enum eInviteStatusCode { InvitationNotSent=0,  Invited=1,  InvitationNearExpired=2,  InvitationExpired=3,  InvitationAccepted=4,  InvitationRejected=5,  InvitationRevoked=6, }
		public enum eOutgoingEmailDeliveryMethod { None=0,  MicrosoftDynamics365ForOutlook=1,  ServerSideSynchronizationOrEmailRouter=2, }
		public enum ePreferredAddressCode { MailingAddress=1,  OtherAddress=2, }
		public enum ePreferredEmailCode { DefaultValue=1, }
		public enum ePreferredPhoneCode { MainPhone=1,  OtherPhone=2,  HomePhone=3,  MobilePhone=4, }
		#pragma warning restore IDE1006 // Naming Styles

		#endregion Local OptionSet Enumerations

		#region Late Bound Field Constants

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>")]
		public static class Fields
		{			
			public const string Id = "systemuserid";
			public const string AccessMode = "accessmode";
			public const string AccessModeName = "accessmodename";
			public const string ActiveDirectoryGuid = "activedirectoryguid";
			public const string Address1AddressId = "address1_addressid";
			public const string Address1AddressTypeCode = "address1_addresstypecode";
			public const string Address1AddressTypeCodeName = "address1_addresstypecodename";
			public const string Address1City = "address1_city";
			public const string Address1Composite = "address1_composite";
			public const string Address1Country = "address1_country";
			public const string Address1County = "address1_county";
			public const string Address1Fax = "address1_fax";
			public const string Address1Latitude = "address1_latitude";
			public const string Address1Line1 = "address1_line1";
			public const string Address1Line2 = "address1_line2";
			public const string Address1Line3 = "address1_line3";
			public const string Address1Longitude = "address1_longitude";
			public const string Address1Name = "address1_name";
			public const string Address1PostalCode = "address1_postalcode";
			public const string Address1PostOfficeBox = "address1_postofficebox";
			public const string Address1ShippingMethodCode = "address1_shippingmethodcode";
			public const string Address1ShippingMethodCodeName = "address1_shippingmethodcodename";
			public const string Address1StateOrProvince = "address1_stateorprovince";
			public const string Address1Telephone1 = "address1_telephone1";
			public const string Address1Telephone2 = "address1_telephone2";
			public const string Address1Telephone3 = "address1_telephone3";
			public const string Address1UPSZone = "address1_upszone";
			public const string Address1UTCOffset = "address1_utcoffset";
			public const string Address2AddressId = "address2_addressid";
			public const string Address2AddressTypeCode = "address2_addresstypecode";
			public const string Address2AddressTypeCodeName = "address2_addresstypecodename";
			public const string Address2City = "address2_city";
			public const string Address2Composite = "address2_composite";
			public const string Address2Country = "address2_country";
			public const string Address2County = "address2_county";
			public const string Address2Fax = "address2_fax";
			public const string Address2Latitude = "address2_latitude";
			public const string Address2Line1 = "address2_line1";
			public const string Address2Line2 = "address2_line2";
			public const string Address2Line3 = "address2_line3";
			public const string Address2Longitude = "address2_longitude";
			public const string Address2Name = "address2_name";
			public const string Address2PostalCode = "address2_postalcode";
			public const string Address2PostOfficeBox = "address2_postofficebox";
			public const string Address2ShippingMethodCode = "address2_shippingmethodcode";
			public const string Address2ShippingMethodCodeName = "address2_shippingmethodcodename";
			public const string Address2StateOrProvince = "address2_stateorprovince";
			public const string Address2Telephone1 = "address2_telephone1";
			public const string Address2Telephone2 = "address2_telephone2";
			public const string Address2Telephone3 = "address2_telephone3";
			public const string Address2UPSZone = "address2_upszone";
			public const string Address2UTCOffset = "address2_utcoffset";
			public const string ApplicationId = "applicationid";
			public const string ApplicationIdUri = "applicationiduri";
			public const string AzureActiveDirectoryObjectId = "azureactivedirectoryobjectid";
			public const string AzureDeletedOn = "azuredeletedon";
			public const string AzureState = "azurestate";
			public const string AzurestateName = "azurestatename";
			public const string BusinessUnitId = "businessunitid";
			public const string BusinessUnitIdName = "businessunitidname";
			public const string CalendarId = "calendarid";
			public const string CALType = "caltype";
			public const string CALTypeName = "caltypename";
			public const string CreatedBy = "createdby";
			public const string CreatedByName = "createdbyname";
			public const string CreatedByYomiName = "createdbyyominame";
			public const string CreatedOn = "createdon";
			public const string CreatedOnBehalfBy = "createdonbehalfby";
			public const string CreatedOnBehalfByName = "createdonbehalfbyname";
			public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";
			public const string DefaultFiltersPopulated = "defaultfilterspopulated";
			public const string DefaultMailbox = "defaultmailbox";
			public const string DefaultMailboxName = "defaultmailboxname";
			public const string DefaultOdbFolderName = "defaultodbfoldername";
			public const string DeletedState = "deletedstate";
			public const string DeletedstateName = "deletedstatename";
			public const string DisabledReason = "disabledreason";
			public const string DisplayInServiceViews = "displayinserviceviews";
			public const string DisplayInServiceViewsName = "displayinserviceviewsname";
			public const string DomainName = "domainname";
			public const string EmailRouterAccessApproval = "emailrouteraccessapproval";
			public const string EmailRouterAccessApprovalName = "emailrouteraccessapprovalname";
			public const string EmployeeId = "employeeid";
			public const string EntityImage = "entityimage";
			public const string EntityImageId = "entityimageid";
			public const string EntityImageTimestamp = "entityimage_timestamp";
			public const string EntityImageURL = "entityimage_url";
			public const string ExchangeRate = "exchangerate";
			public const string FirstName = "firstname";
			public const string FullName = "fullname";
			public const string GovernmentId = "governmentid";
			public const string HomePhone = "homephone";
			public const string IdentityId = "identityid";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string IncomingEmailDeliveryMethod = "incomingemaildeliverymethod";
			public const string IncomingEmailDeliveryMethodName = "incomingemaildeliverymethodname";
			public const string InternalEMailAddress = "internalemailaddress";
			public const string InviteStatusCode = "invitestatuscode";
			public const string InviteStatusCodeName = "invitestatuscodename";
			public const string IrisIdahoStateBarNumber = "iris_idahostatebarnumber";
			public const string IrisSignatureImage = "iris_signatureimage";
			public const string IsActiveDirectoryUser = "isactivedirectoryuser";
			public const string IsDisabled = "isdisabled";
			public const string IsDisabledName = "isdisabledname";
			public const string IsEmailAddressApprovedByO365Admin = "isemailaddressapprovedbyo365admin";
			public const string IsIntegrationUser = "isintegrationuser";
			public const string IsIntegrationUserName = "isintegrationusername";
			public const string IsLicensed = "islicensed";
			public const string IsLicensedName = "islicensedname";
			public const string IsSyncWithDirectory = "issyncwithdirectory";
			public const string JobTitle = "jobtitle";
			public const string LastName = "lastname";
			public const string LatestUpdateTime = "latestupdatetime";
			public const string MiddleName = "middlename";
			public const string MobileAlertEMail = "mobilealertemail";
			public const string MobileOfflineProfileId = "mobileofflineprofileid";
			public const string MobileOfflineProfileIdName = "mobileofflineprofileidname";
			public const string MobilePhone = "mobilephone";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedByName = "modifiedbyname";
			public const string ModifiedByYomiName = "modifiedbyyominame";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedOnBehalfBy = "modifiedonbehalfby";
			public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";
			public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";
			public const string NickName = "nickname";
			public const string OrganizationId = "organizationid";
			public const string OrganizationIdName = "organizationidname";
			public const string OutgoingEmailDeliveryMethod = "outgoingemaildeliverymethod";
			public const string OutgoingEmailDeliveryMethodName = "outgoingemaildeliverymethodname";
			public const string OverriddenCreatedOn = "overriddencreatedon";
			public const string ParentSystemUserId = "parentsystemuserid";
			public const string ParentSystemUserIdName = "parentsystemuseridname";
			public const string ParentSystemUserIdYomiName = "parentsystemuseridyominame";
			public const string PassportHi = "passporthi";
			public const string PassportLo = "passportlo";
			public const string PersonalEMailAddress = "personalemailaddress";
			public const string PhotoUrl = "photourl";
			public const string PositionId = "positionid";
			public const string PositionIdName = "positionidname";
			public const string PreferredAddressCode = "preferredaddresscode";
			public const string PreferredAddressCodeName = "preferredaddresscodename";
			public const string PreferredEmailCode = "preferredemailcode";
			public const string PreferredEmailCodeName = "preferredemailcodename";
			public const string PreferredPhoneCode = "preferredphonecode";
			public const string PreferredPhoneCodeName = "preferredphonecodename";
			public const string ProcessId = "processid";
			public const string QueueId = "queueid";
			public const string QueueIdName = "queueidname";
			public const string Salutation = "salutation";
			public const string SetupUser = "setupuser";
			public const string SetupUserName = "setupusername";
			public const string SharePointEmailAddress = "sharepointemailaddress";
			public const string Skills = "skills";
			public const string StageId = "stageid";
			public const string SystemUserId = "systemuserid";
			public const string TerritoryId = "territoryid";
			public const string TerritoryIdName = "territoryidname";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string Title = "title";
			public const string TransactionCurrencyId = "transactioncurrencyid";
			public const string TransactionCurrencyIdName = "transactioncurrencyidname";
			public const string TraversedPath = "traversedpath";
			public const string UserLicenseType = "userlicensetype";
			public const string UserPuid = "userpuid";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";
			public const string WindowsLiveID = "windowsliveid";
			public const string YammerEmailAddress = "yammeremailaddress";
			public const string YammerUserId = "yammeruserid";
			public const string YomiFirstName = "yomifirstname";
			public const string YomiFullName = "yomifullname";
			public const string YomiLastName = "yomilastname";
			public const string YomiMiddleName = "yomimiddlename";
		}

		#endregion Late Bound Field Constants

		[AttributeLogicalName("systemuserid")]
		public override Guid Id
		{
			get => base.Id; 
			set 
			{
				SystemUserId = value;
				base.Id = value;
			}
		}

		[AttributeLogicalName("accessmode")]
		public virtual eAccessMode? AccessMode
		{
			get => (eAccessMode?)GetPropertyValue<OptionSetValue>("accessmode")?.Value;
			set => SetPropertyValue("accessmode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("accessmodename")]
		public virtual string AccessModeName
		{
			get => GetPropertyValue<string>("accessmodename"); 
		}

		[AttributeLogicalName("activedirectoryguid")]
		public virtual Guid ActiveDirectoryGuid
		{
			get => GetPropertyValue<Guid>("activedirectoryguid"); 
		}

		[AttributeLogicalName("address1_addressid")]
		public virtual Guid Address1AddressId
		{
			get => GetPropertyValue<Guid>("address1_addressid"); 
			set => SetPropertyValue("address1_addressid", value); 
		}

		[AttributeLogicalName("address1_addresstypecode")]
		public virtual eAddress1AddressTypeCode? Address1AddressTypeCode
		{
			get => (eAddress1AddressTypeCode?)GetPropertyValue<OptionSetValue>("address1_addresstypecode")?.Value;
			set => SetPropertyValue("address1_addresstypecode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("address1_addresstypecodename")]
		public virtual string Address1AddressTypeCodeName
		{
			get => GetPropertyValue<string>("address1_addresstypecodename"); 
		}

		[AttributeLogicalName("address1_city")]
		public virtual string Address1City
		{
			get => GetPropertyValue<string>("address1_city"); 
			set => SetPropertyValue("address1_city", value); 
		}

		[AttributeLogicalName("address1_composite")]
		public virtual string Address1Composite
		{
			get => GetPropertyValue<string>("address1_composite"); 
		}

		[AttributeLogicalName("address1_country")]
		public virtual string Address1Country
		{
			get => GetPropertyValue<string>("address1_country"); 
			set => SetPropertyValue("address1_country", value); 
		}

		[AttributeLogicalName("address1_county")]
		public virtual string Address1County
		{
			get => GetPropertyValue<string>("address1_county"); 
			set => SetPropertyValue("address1_county", value); 
		}

		[AttributeLogicalName("address1_fax")]
		public virtual string Address1Fax
		{
			get => GetPropertyValue<string>("address1_fax"); 
			set => SetPropertyValue("address1_fax", value); 
		}

		[AttributeLogicalName("address1_latitude")]
		public virtual double? Address1Latitude
		{
			get => GetPropertyValue<double?>("address1_latitude"); 
			set => SetPropertyValue("address1_latitude", value); 
		}

		[AttributeLogicalName("address1_line1")]
		public virtual string Address1Line1
		{
			get => GetPropertyValue<string>("address1_line1"); 
			set => SetPropertyValue("address1_line1", value); 
		}

		[AttributeLogicalName("address1_line2")]
		public virtual string Address1Line2
		{
			get => GetPropertyValue<string>("address1_line2"); 
			set => SetPropertyValue("address1_line2", value); 
		}

		[AttributeLogicalName("address1_line3")]
		public virtual string Address1Line3
		{
			get => GetPropertyValue<string>("address1_line3"); 
			set => SetPropertyValue("address1_line3", value); 
		}

		[AttributeLogicalName("address1_longitude")]
		public virtual double? Address1Longitude
		{
			get => GetPropertyValue<double?>("address1_longitude"); 
			set => SetPropertyValue("address1_longitude", value); 
		}

		[AttributeLogicalName("address1_name")]
		public virtual string Address1Name
		{
			get => GetPropertyValue<string>("address1_name"); 
			set => SetPropertyValue("address1_name", value); 
		}

		[AttributeLogicalName("address1_postalcode")]
		public virtual string Address1PostalCode
		{
			get => GetPropertyValue<string>("address1_postalcode"); 
			set => SetPropertyValue("address1_postalcode", value); 
		}

		[AttributeLogicalName("address1_postofficebox")]
		public virtual string Address1PostOfficeBox
		{
			get => GetPropertyValue<string>("address1_postofficebox"); 
			set => SetPropertyValue("address1_postofficebox", value); 
		}

		[AttributeLogicalName("address1_shippingmethodcode")]
		public virtual eAddress1ShippingMethodCode? Address1ShippingMethodCode
		{
			get => (eAddress1ShippingMethodCode?)GetPropertyValue<OptionSetValue>("address1_shippingmethodcode")?.Value;
			set => SetPropertyValue("address1_shippingmethodcode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("address1_shippingmethodcodename")]
		public virtual string Address1ShippingMethodCodeName
		{
			get => GetPropertyValue<string>("address1_shippingmethodcodename"); 
		}

		[AttributeLogicalName("address1_stateorprovince")]
		public virtual string Address1StateOrProvince
		{
			get => GetPropertyValue<string>("address1_stateorprovince"); 
			set => SetPropertyValue("address1_stateorprovince", value); 
		}

		[AttributeLogicalName("address1_telephone1")]
		public virtual string Address1Telephone1
		{
			get => GetPropertyValue<string>("address1_telephone1"); 
			set => SetPropertyValue("address1_telephone1", value); 
		}

		[AttributeLogicalName("address1_telephone2")]
		public virtual string Address1Telephone2
		{
			get => GetPropertyValue<string>("address1_telephone2"); 
			set => SetPropertyValue("address1_telephone2", value); 
		}

		[AttributeLogicalName("address1_telephone3")]
		public virtual string Address1Telephone3
		{
			get => GetPropertyValue<string>("address1_telephone3"); 
			set => SetPropertyValue("address1_telephone3", value); 
		}

		[AttributeLogicalName("address1_upszone")]
		public virtual string Address1UPSZone
		{
			get => GetPropertyValue<string>("address1_upszone"); 
			set => SetPropertyValue("address1_upszone", value); 
		}

		[AttributeLogicalName("address1_utcoffset")]
		public virtual int? Address1UTCOffset
		{
			get => GetPropertyValue<int?>("address1_utcoffset"); 
			set => SetPropertyValue("address1_utcoffset", value); 
		}

		[AttributeLogicalName("address2_addressid")]
		public virtual Guid Address2AddressId
		{
			get => GetPropertyValue<Guid>("address2_addressid"); 
			set => SetPropertyValue("address2_addressid", value); 
		}

		[AttributeLogicalName("address2_addresstypecode")]
		public virtual eAddress2AddressTypeCode? Address2AddressTypeCode
		{
			get => (eAddress2AddressTypeCode?)GetPropertyValue<OptionSetValue>("address2_addresstypecode")?.Value;
			set => SetPropertyValue("address2_addresstypecode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("address2_addresstypecodename")]
		public virtual string Address2AddressTypeCodeName
		{
			get => GetPropertyValue<string>("address2_addresstypecodename"); 
		}

		[AttributeLogicalName("address2_city")]
		public virtual string Address2City
		{
			get => GetPropertyValue<string>("address2_city"); 
			set => SetPropertyValue("address2_city", value); 
		}

		[AttributeLogicalName("address2_composite")]
		public virtual string Address2Composite
		{
			get => GetPropertyValue<string>("address2_composite"); 
		}

		[AttributeLogicalName("address2_country")]
		public virtual string Address2Country
		{
			get => GetPropertyValue<string>("address2_country"); 
			set => SetPropertyValue("address2_country", value); 
		}

		[AttributeLogicalName("address2_county")]
		public virtual string Address2County
		{
			get => GetPropertyValue<string>("address2_county"); 
			set => SetPropertyValue("address2_county", value); 
		}

		[AttributeLogicalName("address2_fax")]
		public virtual string Address2Fax
		{
			get => GetPropertyValue<string>("address2_fax"); 
			set => SetPropertyValue("address2_fax", value); 
		}

		[AttributeLogicalName("address2_latitude")]
		public virtual double? Address2Latitude
		{
			get => GetPropertyValue<double?>("address2_latitude"); 
			set => SetPropertyValue("address2_latitude", value); 
		}

		[AttributeLogicalName("address2_line1")]
		public virtual string Address2Line1
		{
			get => GetPropertyValue<string>("address2_line1"); 
			set => SetPropertyValue("address2_line1", value); 
		}

		[AttributeLogicalName("address2_line2")]
		public virtual string Address2Line2
		{
			get => GetPropertyValue<string>("address2_line2"); 
			set => SetPropertyValue("address2_line2", value); 
		}

		[AttributeLogicalName("address2_line3")]
		public virtual string Address2Line3
		{
			get => GetPropertyValue<string>("address2_line3"); 
			set => SetPropertyValue("address2_line3", value); 
		}

		[AttributeLogicalName("address2_longitude")]
		public virtual double? Address2Longitude
		{
			get => GetPropertyValue<double?>("address2_longitude"); 
			set => SetPropertyValue("address2_longitude", value); 
		}

		[AttributeLogicalName("address2_name")]
		public virtual string Address2Name
		{
			get => GetPropertyValue<string>("address2_name"); 
			set => SetPropertyValue("address2_name", value); 
		}

		[AttributeLogicalName("address2_postalcode")]
		public virtual string Address2PostalCode
		{
			get => GetPropertyValue<string>("address2_postalcode"); 
			set => SetPropertyValue("address2_postalcode", value); 
		}

		[AttributeLogicalName("address2_postofficebox")]
		public virtual string Address2PostOfficeBox
		{
			get => GetPropertyValue<string>("address2_postofficebox"); 
			set => SetPropertyValue("address2_postofficebox", value); 
		}

		[AttributeLogicalName("address2_shippingmethodcode")]
		public virtual eAddress2ShippingMethodCode? Address2ShippingMethodCode
		{
			get => (eAddress2ShippingMethodCode?)GetPropertyValue<OptionSetValue>("address2_shippingmethodcode")?.Value;
			set => SetPropertyValue("address2_shippingmethodcode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("address2_shippingmethodcodename")]
		public virtual string Address2ShippingMethodCodeName
		{
			get => GetPropertyValue<string>("address2_shippingmethodcodename"); 
		}

		[AttributeLogicalName("address2_stateorprovince")]
		public virtual string Address2StateOrProvince
		{
			get => GetPropertyValue<string>("address2_stateorprovince"); 
			set => SetPropertyValue("address2_stateorprovince", value); 
		}

		[AttributeLogicalName("address2_telephone1")]
		public virtual string Address2Telephone1
		{
			get => GetPropertyValue<string>("address2_telephone1"); 
			set => SetPropertyValue("address2_telephone1", value); 
		}

		[AttributeLogicalName("address2_telephone2")]
		public virtual string Address2Telephone2
		{
			get => GetPropertyValue<string>("address2_telephone2"); 
			set => SetPropertyValue("address2_telephone2", value); 
		}

		[AttributeLogicalName("address2_telephone3")]
		public virtual string Address2Telephone3
		{
			get => GetPropertyValue<string>("address2_telephone3"); 
			set => SetPropertyValue("address2_telephone3", value); 
		}

		[AttributeLogicalName("address2_upszone")]
		public virtual string Address2UPSZone
		{
			get => GetPropertyValue<string>("address2_upszone"); 
			set => SetPropertyValue("address2_upszone", value); 
		}

		[AttributeLogicalName("address2_utcoffset")]
		public virtual int? Address2UTCOffset
		{
			get => GetPropertyValue<int?>("address2_utcoffset"); 
			set => SetPropertyValue("address2_utcoffset", value); 
		}

		[AttributeLogicalName("applicationid")]
		public virtual Guid ApplicationId
		{
			get => GetPropertyValue<Guid>("applicationid"); 
			set => SetPropertyValue("applicationid", value); 
		}

		[AttributeLogicalName("applicationiduri")]
		public virtual string ApplicationIdUri
		{
			get => GetPropertyValue<string>("applicationiduri"); 
		}

		[AttributeLogicalName("azureactivedirectoryobjectid")]
		public virtual Guid AzureActiveDirectoryObjectId
		{
			get => GetPropertyValue<Guid>("azureactivedirectoryobjectid"); 
		}

		[AttributeLogicalName("azuredeletedon")]
		public virtual DateTime? AzureDeletedOn
		{
			get => GetPropertyValue<DateTime?>("azuredeletedon"); 
		}

		[AttributeLogicalName("azurestate")]
		public virtual eAzureState? AzureState
		{
			get => (eAzureState?)GetPropertyValue<OptionSetValue>("azurestate")?.Value;
			set => SetPropertyValue("azurestate", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("azurestatename")]
		public virtual string AzurestateName
		{
			get => GetPropertyValue<string>("azurestatename"); 
		}

		[AttributeLogicalName("businessunitid")]
		public virtual EntityReference BusinessUnitId
		{
			get => GetPropertyValue<EntityReference>("businessunitid"); 
			set => SetPropertyValue("businessunitid", value); 
		}

		[AttributeLogicalName("businessunitidname")]
		public virtual string BusinessUnitIdName
		{
			get => GetPropertyValue<string>("businessunitidname"); 
		}

		[AttributeLogicalName("calendarid")]
		public virtual EntityReference CalendarId
		{
			get => GetPropertyValue<EntityReference>("calendarid"); 
			set => SetPropertyValue("calendarid", value); 
		}

		[AttributeLogicalName("caltype")]
		public virtual eCALType? CALType
		{
			get => (eCALType?)GetPropertyValue<OptionSetValue>("caltype")?.Value;
			set => SetPropertyValue("caltype", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("caltypename")]
		public virtual string CALTypeName
		{
			get => GetPropertyValue<string>("caltypename"); 
		}

		[AttributeLogicalName("createdby")]
		public virtual EntityReference CreatedBy
		{
			get => GetPropertyValue<EntityReference>("createdby"); 
		}

		[AttributeLogicalName("createdbyname")]
		public virtual string CreatedByName
		{
			get => GetPropertyValue<string>("createdbyname"); 
		}

		[AttributeLogicalName("createdbyyominame")]
		public virtual string CreatedByYomiName
		{
			get => GetPropertyValue<string>("createdbyyominame"); 
		}

		[AttributeLogicalName("createdon")]
		public virtual DateTime? CreatedOn
		{
			get => GetPropertyValue<DateTime?>("createdon"); 
		}

		[AttributeLogicalName("createdonbehalfby")]
		public virtual EntityReference CreatedOnBehalfBy
		{
			get => GetPropertyValue<EntityReference>("createdonbehalfby"); 
		}

		[AttributeLogicalName("createdonbehalfbyname")]
		public virtual string CreatedOnBehalfByName
		{
			get => GetPropertyValue<string>("createdonbehalfbyname"); 
		}

		[AttributeLogicalName("createdonbehalfbyyominame")]
		public virtual string CreatedOnBehalfByYomiName
		{
			get => GetPropertyValue<string>("createdonbehalfbyyominame"); 
		}

		[AttributeLogicalName("defaultfilterspopulated")]
		public virtual bool? DefaultFiltersPopulated
		{
			get => GetPropertyValue<bool?>("defaultfilterspopulated"); 
		}

		[AttributeLogicalName("defaultmailbox")]
		public virtual EntityReference DefaultMailbox
		{
			get => GetPropertyValue<EntityReference>("defaultmailbox"); 
		}

		[AttributeLogicalName("defaultmailboxname")]
		public virtual string DefaultMailboxName
		{
			get => GetPropertyValue<string>("defaultmailboxname"); 
		}

		[AttributeLogicalName("defaultodbfoldername")]
		public virtual string DefaultOdbFolderName
		{
			get => GetPropertyValue<string>("defaultodbfoldername"); 
		}

		[AttributeLogicalName("deletedstate")]
		public virtual eDeletedState? DeletedState
		{
			get => (eDeletedState?)GetPropertyValue<OptionSetValue>("deletedstate")?.Value;
		}

		[AttributeLogicalName("deletedstatename")]
		public virtual string DeletedstateName
		{
			get => GetPropertyValue<string>("deletedstatename"); 
		}

		[AttributeLogicalName("disabledreason")]
		public virtual string DisabledReason
		{
			get => GetPropertyValue<string>("disabledreason"); 
		}

		[AttributeLogicalName("displayinserviceviews")]
		public virtual bool? DisplayInServiceViews
		{
			get => GetPropertyValue<bool?>("displayinserviceviews"); 
			set => SetPropertyValue("displayinserviceviews", value); 
		}

		[AttributeLogicalName("displayinserviceviewsname")]
		public virtual string DisplayInServiceViewsName
		{
			get => GetPropertyValue<string>("displayinserviceviewsname"); 
		}

		[AttributeLogicalName("domainname")]
		public virtual string DomainName
		{
			get => GetPropertyValue<string>("domainname"); 
			set => SetPropertyValue("domainname", value); 
		}

		[AttributeLogicalName("emailrouteraccessapproval")]
		public virtual eEmailRouterAccessApproval? EmailRouterAccessApproval
		{
			get => (eEmailRouterAccessApproval?)GetPropertyValue<OptionSetValue>("emailrouteraccessapproval")?.Value;
			set => SetPropertyValue("emailrouteraccessapproval", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("emailrouteraccessapprovalname")]
		public virtual string EmailRouterAccessApprovalName
		{
			get => GetPropertyValue<string>("emailrouteraccessapprovalname"); 
		}

		[AttributeLogicalName("employeeid")]
		public virtual string EmployeeId
		{
			get => GetPropertyValue<string>("employeeid"); 
			set => SetPropertyValue("employeeid", value); 
		}

		[AttributeLogicalName("entityimage")]
		public virtual string EntityImage
		{
			get => GetPropertyValue<string>("entityimage"); 
			set => SetPropertyValue("entityimage", value); 
		}

		[AttributeLogicalName("entityimageid")]
		public virtual Guid EntityImageId
		{
			get => GetPropertyValue<Guid>("entityimageid"); 
		}

		[AttributeLogicalName("entityimage_timestamp")]
		public virtual int? EntityImageTimestamp
		{
			get => GetPropertyValue<int?>("entityimage_timestamp"); 
		}

		[AttributeLogicalName("entityimage_url")]
		public virtual string EntityImageURL
		{
			get => GetPropertyValue<string>("entityimage_url"); 
		}

		[AttributeLogicalName("exchangerate")]
		public virtual decimal? ExchangeRate
		{
			get => GetPropertyValue<decimal?>("exchangerate"); 
		}

		[AttributeLogicalName("firstname")]
		public virtual string FirstName
		{
			get => GetPropertyValue<string>("firstname"); 
			set => SetPropertyValue("firstname", value); 
		}

		[AttributeLogicalName("fullname")]
		public virtual string FullName
		{
			get => GetPropertyValue<string>("fullname"); 
		}

		[AttributeLogicalName("governmentid")]
		public virtual string GovernmentId
		{
			get => GetPropertyValue<string>("governmentid"); 
			set => SetPropertyValue("governmentid", value); 
		}

		[AttributeLogicalName("homephone")]
		public virtual string HomePhone
		{
			get => GetPropertyValue<string>("homephone"); 
			set => SetPropertyValue("homephone", value); 
		}

		[AttributeLogicalName("identityid")]
		public virtual int? IdentityId
		{
			get => GetPropertyValue<int?>("identityid"); 
		}

		[AttributeLogicalName("importsequencenumber")]
		public virtual int? ImportSequenceNumber
		{
			get => GetPropertyValue<int?>("importsequencenumber"); 
			set => SetPropertyValue("importsequencenumber", value); 
		}

		[AttributeLogicalName("incomingemaildeliverymethod")]
		public virtual eIncomingEmailDeliveryMethod? IncomingEmailDeliveryMethod
		{
			get => (eIncomingEmailDeliveryMethod?)GetPropertyValue<OptionSetValue>("incomingemaildeliverymethod")?.Value;
			set => SetPropertyValue("incomingemaildeliverymethod", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("incomingemaildeliverymethodname")]
		public virtual string IncomingEmailDeliveryMethodName
		{
			get => GetPropertyValue<string>("incomingemaildeliverymethodname"); 
		}

		[AttributeLogicalName("internalemailaddress")]
		public virtual string InternalEMailAddress
		{
			get => GetPropertyValue<string>("internalemailaddress"); 
			set => SetPropertyValue("internalemailaddress", value); 
		}

		[AttributeLogicalName("invitestatuscode")]
		public virtual eInviteStatusCode? InviteStatusCode
		{
			get => (eInviteStatusCode?)GetPropertyValue<OptionSetValue>("invitestatuscode")?.Value;
			set => SetPropertyValue("invitestatuscode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("invitestatuscodename")]
		public virtual string InviteStatusCodeName
		{
			get => GetPropertyValue<string>("invitestatuscodename"); 
		}

		[AttributeLogicalName("iris_idahostatebarnumber")]
		public virtual string IrisIdahoStateBarNumber
		{
			get => GetPropertyValue<string>("iris_idahostatebarnumber"); 
			set => SetPropertyValue("iris_idahostatebarnumber", value); 
		}

		[AttributeLogicalName("iris_signatureimage")]
		public virtual string IrisSignatureImage
		{
			get => GetPropertyValue<string>("iris_signatureimage"); 
			set => SetPropertyValue("iris_signatureimage", value); 
		}

		[AttributeLogicalName("isactivedirectoryuser")]
		public virtual bool? IsActiveDirectoryUser
		{
			get => GetPropertyValue<bool?>("isactivedirectoryuser"); 
		}

		[AttributeLogicalName("isdisabled")]
		public virtual bool? IsDisabled
		{
			get => GetPropertyValue<bool?>("isdisabled"); 
			set => SetPropertyValue("isdisabled", value); 
		}

		[AttributeLogicalName("isdisabledname")]
		public virtual string IsDisabledName
		{
			get => GetPropertyValue<string>("isdisabledname"); 
		}

		[AttributeLogicalName("isemailaddressapprovedbyo365admin")]
		public virtual bool? IsEmailAddressApprovedByO365Admin
		{
			get => GetPropertyValue<bool?>("isemailaddressapprovedbyo365admin"); 
		}

		[AttributeLogicalName("isintegrationuser")]
		public virtual bool? IsIntegrationUser
		{
			get => GetPropertyValue<bool?>("isintegrationuser"); 
			set => SetPropertyValue("isintegrationuser", value); 
		}

		[AttributeLogicalName("isintegrationusername")]
		public virtual string IsIntegrationUserName
		{
			get => GetPropertyValue<string>("isintegrationusername"); 
		}

		[AttributeLogicalName("islicensed")]
		public virtual bool? IsLicensed
		{
			get => GetPropertyValue<bool?>("islicensed"); 
			set => SetPropertyValue("islicensed", value); 
		}

		[AttributeLogicalName("islicensedname")]
		public virtual string IsLicensedName
		{
			get => GetPropertyValue<string>("islicensedname"); 
		}

		[AttributeLogicalName("issyncwithdirectory")]
		public virtual bool? IsSyncWithDirectory
		{
			get => GetPropertyValue<bool?>("issyncwithdirectory"); 
			set => SetPropertyValue("issyncwithdirectory", value); 
		}

		[AttributeLogicalName("jobtitle")]
		public virtual string JobTitle
		{
			get => GetPropertyValue<string>("jobtitle"); 
			set => SetPropertyValue("jobtitle", value); 
		}

		[AttributeLogicalName("lastname")]
		public virtual string LastName
		{
			get => GetPropertyValue<string>("lastname"); 
			set => SetPropertyValue("lastname", value); 
		}

		[AttributeLogicalName("latestupdatetime")]
		public virtual DateTime? LatestUpdateTime
		{
			get => GetPropertyValue<DateTime?>("latestupdatetime"); 
		}

		[AttributeLogicalName("middlename")]
		public virtual string MiddleName
		{
			get => GetPropertyValue<string>("middlename"); 
			set => SetPropertyValue("middlename", value); 
		}

		[AttributeLogicalName("mobilealertemail")]
		public virtual string MobileAlertEMail
		{
			get => GetPropertyValue<string>("mobilealertemail"); 
			set => SetPropertyValue("mobilealertemail", value); 
		}

		[AttributeLogicalName("mobileofflineprofileid")]
		public virtual EntityReference MobileOfflineProfileId
		{
			get => GetPropertyValue<EntityReference>("mobileofflineprofileid"); 
			set => SetPropertyValue("mobileofflineprofileid", value); 
		}

		[AttributeLogicalName("mobileofflineprofileidname")]
		public virtual string MobileOfflineProfileIdName
		{
			get => GetPropertyValue<string>("mobileofflineprofileidname"); 
			set => SetPropertyValue("mobileofflineprofileidname", value); 
		}

		[AttributeLogicalName("mobilephone")]
		public virtual string MobilePhone
		{
			get => GetPropertyValue<string>("mobilephone"); 
			set => SetPropertyValue("mobilephone", value); 
		}

		[AttributeLogicalName("modifiedby")]
		public virtual EntityReference ModifiedBy
		{
			get => GetPropertyValue<EntityReference>("modifiedby"); 
		}

		[AttributeLogicalName("modifiedbyname")]
		public virtual string ModifiedByName
		{
			get => GetPropertyValue<string>("modifiedbyname"); 
		}

		[AttributeLogicalName("modifiedbyyominame")]
		public virtual string ModifiedByYomiName
		{
			get => GetPropertyValue<string>("modifiedbyyominame"); 
		}

		[AttributeLogicalName("modifiedon")]
		public virtual DateTime? ModifiedOn
		{
			get => GetPropertyValue<DateTime?>("modifiedon"); 
		}

		[AttributeLogicalName("modifiedonbehalfby")]
		public virtual EntityReference ModifiedOnBehalfBy
		{
			get => GetPropertyValue<EntityReference>("modifiedonbehalfby"); 
		}

		[AttributeLogicalName("modifiedonbehalfbyname")]
		public virtual string ModifiedOnBehalfByName
		{
			get => GetPropertyValue<string>("modifiedonbehalfbyname"); 
		}

		[AttributeLogicalName("modifiedonbehalfbyyominame")]
		public virtual string ModifiedOnBehalfByYomiName
		{
			get => GetPropertyValue<string>("modifiedonbehalfbyyominame"); 
		}

		[AttributeLogicalName("nickname")]
		public virtual string NickName
		{
			get => GetPropertyValue<string>("nickname"); 
			set => SetPropertyValue("nickname", value); 
		}

		[AttributeLogicalName("organizationid")]
		public virtual Guid OrganizationId
		{
			get => GetPropertyValue<Guid>("organizationid"); 
		}

		[AttributeLogicalName("organizationidname")]
		public virtual string OrganizationIdName
		{
			get => GetPropertyValue<string>("organizationidname"); 
		}

		[AttributeLogicalName("outgoingemaildeliverymethod")]
		public virtual eOutgoingEmailDeliveryMethod? OutgoingEmailDeliveryMethod
		{
			get => (eOutgoingEmailDeliveryMethod?)GetPropertyValue<OptionSetValue>("outgoingemaildeliverymethod")?.Value;
			set => SetPropertyValue("outgoingemaildeliverymethod", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("outgoingemaildeliverymethodname")]
		public virtual string OutgoingEmailDeliveryMethodName
		{
			get => GetPropertyValue<string>("outgoingemaildeliverymethodname"); 
		}

		[AttributeLogicalName("overriddencreatedon")]
		public virtual DateTime? OverriddenCreatedOn
		{
			get => GetPropertyValue<DateTime?>("overriddencreatedon"); 
			set => SetPropertyValue("overriddencreatedon", value); 
		}

		[AttributeLogicalName("parentsystemuserid")]
		public virtual EntityReference ParentSystemUserId
		{
			get => GetPropertyValue<EntityReference>("parentsystemuserid"); 
			set => SetPropertyValue("parentsystemuserid", value); 
		}

		[AttributeLogicalName("parentsystemuseridname")]
		public virtual string ParentSystemUserIdName
		{
			get => GetPropertyValue<string>("parentsystemuseridname"); 
		}

		[AttributeLogicalName("parentsystemuseridyominame")]
		public virtual string ParentSystemUserIdYomiName
		{
			get => GetPropertyValue<string>("parentsystemuseridyominame"); 
		}

		[AttributeLogicalName("passporthi")]
		public virtual int? PassportHi
		{
			get => GetPropertyValue<int?>("passporthi"); 
			set => SetPropertyValue("passporthi", value); 
		}

		[AttributeLogicalName("passportlo")]
		public virtual int? PassportLo
		{
			get => GetPropertyValue<int?>("passportlo"); 
			set => SetPropertyValue("passportlo", value); 
		}

		[AttributeLogicalName("personalemailaddress")]
		public virtual string PersonalEMailAddress
		{
			get => GetPropertyValue<string>("personalemailaddress"); 
			set => SetPropertyValue("personalemailaddress", value); 
		}

		[AttributeLogicalName("photourl")]
		public virtual string PhotoUrl
		{
			get => GetPropertyValue<string>("photourl"); 
			set => SetPropertyValue("photourl", value); 
		}

		[AttributeLogicalName("positionid")]
		public virtual EntityReference PositionId
		{
			get => GetPropertyValue<EntityReference>("positionid"); 
			set => SetPropertyValue("positionid", value); 
		}

		[AttributeLogicalName("positionidname")]
		public virtual string PositionIdName
		{
			get => GetPropertyValue<string>("positionidname"); 
		}

		[AttributeLogicalName("preferredaddresscode")]
		public virtual ePreferredAddressCode? PreferredAddressCode
		{
			get => (ePreferredAddressCode?)GetPropertyValue<OptionSetValue>("preferredaddresscode")?.Value;
			set => SetPropertyValue("preferredaddresscode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("preferredaddresscodename")]
		public virtual string PreferredAddressCodeName
		{
			get => GetPropertyValue<string>("preferredaddresscodename"); 
		}

		[AttributeLogicalName("preferredemailcode")]
		public virtual ePreferredEmailCode? PreferredEmailCode
		{
			get => (ePreferredEmailCode?)GetPropertyValue<OptionSetValue>("preferredemailcode")?.Value;
			set => SetPropertyValue("preferredemailcode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("preferredemailcodename")]
		public virtual string PreferredEmailCodeName
		{
			get => GetPropertyValue<string>("preferredemailcodename"); 
		}

		[AttributeLogicalName("preferredphonecode")]
		public virtual ePreferredPhoneCode? PreferredPhoneCode
		{
			get => (ePreferredPhoneCode?)GetPropertyValue<OptionSetValue>("preferredphonecode")?.Value;
			set => SetPropertyValue("preferredphonecode", value is null ? null : new OptionSetValue((int)value)); 
		}

		[AttributeLogicalName("preferredphonecodename")]
		public virtual string PreferredPhoneCodeName
		{
			get => GetPropertyValue<string>("preferredphonecodename"); 
		}

		[AttributeLogicalName("processid")]
		public virtual Guid ProcessId
		{
			get => GetPropertyValue<Guid>("processid"); 
			set => SetPropertyValue("processid", value); 
		}

		[AttributeLogicalName("queueid")]
		public virtual EntityReference QueueId
		{
			get => GetPropertyValue<EntityReference>("queueid"); 
			set => SetPropertyValue("queueid", value); 
		}

		[AttributeLogicalName("queueidname")]
		public virtual string QueueIdName
		{
			get => GetPropertyValue<string>("queueidname"); 
		}

		[AttributeLogicalName("salutation")]
		public virtual string Salutation
		{
			get => GetPropertyValue<string>("salutation"); 
			set => SetPropertyValue("salutation", value); 
		}

		[AttributeLogicalName("setupuser")]
		public virtual bool? SetupUser
		{
			get => GetPropertyValue<bool?>("setupuser"); 
			set => SetPropertyValue("setupuser", value); 
		}

		[AttributeLogicalName("setupusername")]
		public virtual string SetupUserName
		{
			get => GetPropertyValue<string>("setupusername"); 
		}

		[AttributeLogicalName("sharepointemailaddress")]
		public virtual string SharePointEmailAddress
		{
			get => GetPropertyValue<string>("sharepointemailaddress"); 
			set => SetPropertyValue("sharepointemailaddress", value); 
		}

		[AttributeLogicalName("skills")]
		public virtual string Skills
		{
			get => GetPropertyValue<string>("skills"); 
			set => SetPropertyValue("skills", value); 
		}

		[AttributeLogicalName("stageid")]
		public virtual Guid StageId
		{
			get => GetPropertyValue<Guid>("stageid"); 
			set => SetPropertyValue("stageid", value); 
		}

		[AttributeLogicalName("systemuserid")]
		public virtual Guid SystemUserId
		{
			get => GetPropertyValue<Guid>("systemuserid"); 
			set => SetPropertyValue("systemuserid", value); 
		}

		[AttributeLogicalName("territoryid")]
		public virtual EntityReference TerritoryId
		{
			get => GetPropertyValue<EntityReference>("territoryid"); 
			set => SetPropertyValue("territoryid", value); 
		}

		[AttributeLogicalName("territoryidname")]
		public virtual string TerritoryIdName
		{
			get => GetPropertyValue<string>("territoryidname"); 
		}

		[AttributeLogicalName("timezoneruleversionnumber")]
		public virtual int? TimeZoneRuleVersionNumber
		{
			get => GetPropertyValue<int?>("timezoneruleversionnumber"); 
			set => SetPropertyValue("timezoneruleversionnumber", value); 
		}

		[AttributeLogicalName("title")]
		public virtual string Title
		{
			get => GetPropertyValue<string>("title"); 
			set => SetPropertyValue("title", value); 
		}

		[AttributeLogicalName("transactioncurrencyid")]
		public virtual EntityReference TransactionCurrencyId
		{
			get => GetPropertyValue<EntityReference>("transactioncurrencyid"); 
			set => SetPropertyValue("transactioncurrencyid", value); 
		}

		[AttributeLogicalName("transactioncurrencyidname")]
		public virtual string TransactionCurrencyIdName
		{
			get => GetPropertyValue<string>("transactioncurrencyidname"); 
		}

		[AttributeLogicalName("traversedpath")]
		public virtual string TraversedPath
		{
			get => GetPropertyValue<string>("traversedpath"); 
			set => SetPropertyValue("traversedpath", value); 
		}

		[AttributeLogicalName("userlicensetype")]
		public virtual int? UserLicenseType
		{
			get => GetPropertyValue<int?>("userlicensetype"); 
			set => SetPropertyValue("userlicensetype", value); 
		}

		[AttributeLogicalName("userpuid")]
		public virtual string UserPuid
		{
			get => GetPropertyValue<string>("userpuid"); 
		}

		[AttributeLogicalName("utcconversiontimezonecode")]
		public virtual int? UTCConversionTimeZoneCode
		{
			get => GetPropertyValue<int?>("utcconversiontimezonecode"); 
			set => SetPropertyValue("utcconversiontimezonecode", value); 
		}

		[AttributeLogicalName("versionnumber")]
		public virtual int? VersionNumber
		{
			get => GetPropertyValue<int?>("versionnumber"); 
		}

		[AttributeLogicalName("windowsliveid")]
		public virtual string WindowsLiveID
		{
			get => GetPropertyValue<string>("windowsliveid"); 
			set => SetPropertyValue("windowsliveid", value); 
		}

		[AttributeLogicalName("yammeremailaddress")]
		public virtual string YammerEmailAddress
		{
			get => GetPropertyValue<string>("yammeremailaddress"); 
			set => SetPropertyValue("yammeremailaddress", value); 
		}

		[AttributeLogicalName("yammeruserid")]
		public virtual string YammerUserId
		{
			get => GetPropertyValue<string>("yammeruserid"); 
			set => SetPropertyValue("yammeruserid", value); 
		}

		[AttributeLogicalName("yomifirstname")]
		public virtual string YomiFirstName
		{
			get => GetPropertyValue<string>("yomifirstname"); 
			set => SetPropertyValue("yomifirstname", value); 
		}

		[AttributeLogicalName("yomifullname")]
		public virtual string YomiFullName
		{
			get => GetPropertyValue<string>("yomifullname"); 
		}

		[AttributeLogicalName("yomilastname")]
		public virtual string YomiLastName
		{
			get => GetPropertyValue<string>("yomilastname"); 
			set => SetPropertyValue("yomilastname", value); 
		}

		[AttributeLogicalName("yomimiddlename")]
		public virtual string YomiMiddleName
		{
			get => GetPropertyValue<string>("yomimiddlename"); 
			set => SetPropertyValue("yomimiddlename", value); 
		}

	

	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("businessunitid")]
	[RelationshipSchemaName("business_unit_system_users")]
	public BusinessUnit business_unit_system_users
	{
		get { return this.GetRelatedEntity<BusinessUnit>("business_unit_system_users",null); }
	}


	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("createdby")]
	[RelationshipSchemaName("lk_systemuserbase_createdby")]
	public SystemUser lk_systemuserbase_createdby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_systemuserbase_createdby",null); }
	}


		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("modifiedby")]
	[RelationshipSchemaName("lk_systemuserbase_modifiedby")]
	public SystemUser lk_systemuserbase_modifiedby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_systemuserbase_modifiedby",null); }
	}


		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("createdonbehalfby")]
	[RelationshipSchemaName("lk_systemuser_createdonbehalfby")]
	public SystemUser lk_systemuser_createdonbehalfby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_systemuser_createdonbehalfby",null); }
	}


	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("modifiedonbehalfby")]
	[RelationshipSchemaName("lk_systemuser_modifiedonbehalfby")]
	public SystemUser lk_systemuser_modifiedonbehalfby
	{
		get { return this.GetRelatedEntity<SystemUser>("lk_systemuser_modifiedonbehalfby",null); }
	}


	
	
	
	
	
	
	
	
		[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Style", "IDE1006:Naming Styles", Justification = "<Pending>")]
	[AttributeLogicalName("parentsystemuserid")]
	[RelationshipSchemaName("user_parent_user")]
	public SystemUser user_parent_user
	{
		get { return this.GetRelatedEntity<SystemUser>("user_parent_user",null); }
	}

    }
}
