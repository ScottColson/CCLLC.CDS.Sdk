// 
// Code generated by a template.
//
using System;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;


namespace Shared.Proxies 
{
	
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1707:Identifiers should not contain underscores", Justification = "<Pending>")]
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Naming", "CA1720:Identifier contains type name", Justification = "<Pending>")]
	[System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1056:URI-like properties should not be strings", Justification = "<Pending>")]
	[EntityLogicalName("teammembership")]
	public partial class TeamMembership : CCLLC.CDS.Sdk.EarlyBound.EntityProxy
	{
		public const string EntityLogicalName = "teammembership";
		public const string PrimaryIdAttribute = "teammembershipid";

		public TeamMembership()
			: base("teammembership") {}


		#region Late Bound Field Constants

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Design", "CA1034:Nested types should not be visible", Justification = "<Pending>")]
		public static class Fields
		{			
			public const string Id = "teammembershipid";
			public const string SystemUserId = "systemuserid";
			public const string TeamId = "teamid";
			public const string TeamMembershipId = "teammembershipid";
			public const string VersionNumber = "versionnumber";
		}

		#endregion Late Bound Field Constants

		[AttributeLogicalName("teammembershipid")]
		public override Guid Id
		{
			get => base.Id; 
			set 
			{
				TeamMembershipId = value;
				base.Id = value;
			}
		}

		[AttributeLogicalName("systemuserid")]
		public virtual Guid SystemUserId
		{
			get => GetPropertyValue<Guid>("systemuserid"); 
		}

		[AttributeLogicalName("teamid")]
		public virtual Guid TeamId
		{
			get => GetPropertyValue<Guid>("teamid"); 
		}

		[AttributeLogicalName("teammembershipid")]
		public virtual Guid TeamMembershipId
		{
			get => GetPropertyValue<Guid>("teammembershipid"); 
			set => SetPropertyValue("teammembershipid", value); 
		}

		[AttributeLogicalName("versionnumber")]
		public virtual int? VersionNumber
		{
			get => GetPropertyValue<int?>("versionnumber"); 
		}

	

	    }
}
